security:
    # üîê H√©ritage des r√¥les : ROLE_ADMIN a automatiquement les droits de ROLE_USER
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
                
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: /accueil

            # pour permettre aux utilisateurs de rester connect√©s
            remember_me: 
                secret: '%env(APP_SECRET)%'       # Utilise le secret de l'application
                lifetime: 604800                  # 1 semaine en secondes
                path: /                           # Cookie valable sur tout le site
                always_remember_me: false         # Ne pas forcer par d√©faut (activ√© si case coch√©e dans le formulaire)
                secure: auto                      # Le cookie sera "secure" seulement si le site est en HTTPS
                httponly: true                    # Emp√™che l‚Äôacc√®s aux cookies via JavaScript (protection XSS)


            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

            #require_previous_session: false
            #access_denied_url: https://127.0.0.1:8000
            # Forcer l'usage de HTTPS
            #secure: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # https://symfony.com/doc/current/security/force_https.html (version 7.2 current) ! 
    # => To enforce HTTPS on all URLs, add the requires_channel config to every access control
    access_control:
         # Seuls les ADMIN acc√®dent √† l'espace admin
         #- { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/admin, roles: ROLE_ADMIN, requires_channel: https }
         # Tout le monde acc√®de √† la page login
         #- { path: ^/login, roles: PUBLIC_ACCESS }  # ceci fonctionne ! 
         - { path: ^/login, roles: PUBLIC_ACCESS, requires_channel: https }  # ceci fonctionne !
         # Toute autre page n√©cessite au minimum d'√™tre USER
         #- { path: ^/accueil, roles: ROLE_USER }
         - { path: ^/accueil, roles: ROLE_USER, requires_channel: https }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
